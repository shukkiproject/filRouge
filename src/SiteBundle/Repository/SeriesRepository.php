<?php

namespace SiteBundle\Repository;

/**
 * SeriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SeriesRepository extends \Doctrine\ORM\EntityRepository
{
	public function seriesfollowed($id){
		//order by the most recent articles
		return $this->createQueryBuilder('series')

		->where('series.id='.$id)
		->leftJoin('series.followedBy', 'follow')
		// ->leftJoin('art.categories', 'cat')
		// ->leftJoin('art.image', 'img')
		->getQuery()
		->getResult();
	}
	//méthode pour la recherche 
	public function searchMethod($term){
        $query = $this->createQueryBuilder('s')
            ->select('s')
            ->orderBy('s.name','ASC')
            ->where('s.validated= :is_validated' )
            ->andWhere('s.name LIKE :term')
            ->setParameter(':is_validated',true)
            ->setParameter(':term','%'.$term.'%')
            //->setMaxResults($limit)
            ->getQuery();
        return $query->getResult();
    }

    //méthode pour autocomplétion
    public function listeSeries($term)
	{
		$qb = $this->createQueryBuilder('s');
		$qb ->select('s.name')
			->where('s.name LIKE :term')
			->setParameter('term', '%'.$term.'%');
		$arrayAss= $qb->getQuery()
                   ->getArrayResult();
		//Transformer le tableau associatif en un tableau standard
		$array = array();
		foreach($arrayAss as $data)
		{
			$array[] = $data['name'];
		}
		return $array;
	}

	
	public function findByUserid($id){
		//order by the most recent comment
		return $this->createQueryBuilder('series')
	    ->select('series')
	    ->leftJoin('series.followedBy', 'follow')
		->where('follow.id='.$id)
		->getQuery()
		->getResult();
	}

	public function recentSeries(){

		//order by the most recent comments
		return $this->createQueryBuilder('series')
		->orderBy('series.date', 'DESC')
	       ->setFirstResult(0)
	       ->setMaxResults(5)		
		->getQuery()
		->getResult();
	}

	public function popularSeries(){

		//order by the popular series
		return $this->createQueryBuilder('s')
		->addSelect('COUNT(f) AS HIDDEN nbfollower' , 's')
		->leftJoin('s.followedBy', 'f')
		->orderBy('nbfollower', 'DESC')
		->groupBy('s')
	       ->setFirstResult(0)
	       ->setMaxResults(5)		
		->getQuery()
		->getResult();
	}

	public function mostCommentedSeries(){

		//order by the popular series
		return $this->createQueryBuilder('s')
		->addSelect('COUNT(f) AS HIDDEN nbComment' , 's')
		->leftJoin('s.comments', 'f')
		->orderBy('nbComment', 'DESC')
		->groupBy('s')
	       ->setFirstResult(0)
	       ->setMaxResults(5)		
		->getQuery()
		->getResult();
	}

}
